* modelcaller.h impl
    should be just the same as in perf.h:
    map<string, double> params; // fill in with each param--value pair for this site
    SSTMAC_compute_eiger(params, citename + ".model");
* Add documentation about naming convention/requirements

* add mixin handling for clocking/papi (ie we can decide whether or not to use it)
    addResultProvider?

add function to api to turn on PAPI (ie lwperf_use_papi(lwperf_t perf) or something)
    LWPERF_USE_PAPI, LWPERF_USE_EIGER

* remove underscore from beginning of config macro names
    add LWPERF prefix, for namespacing?
* fortran api on top of c api
* c++ api on top of c api
template<typename T, typename... Targs>
void parse(T value, Targs... rest){
    add(value);
}

template<typename T>
add(T value);

template<>
add<datakind::RESULT>(datakind::RESULT value);


Add in timer so we can handle overflow.
    Necessary? Are any compute regions greater than ~60 secs?
    Would need to set up and tear down per region. Maybe just print out a
    warning if the end time is greater than some threshold, indicating that it
    should be re-run with overflow handling turned on.
        Add a compilation flag that turns on overflow handling.
