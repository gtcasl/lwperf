* papi integration: add papi to configure.ac
* fortran api on top of c api
* c++ api on top of c api
* Change fake/eiger backends to immediate/delayed (meaning: to file, or to mem and file afterwards)
    Maybe a flag at compile time (c api header) to choose memoized execution?


template<typename T, typename... Targs>
void parse(T value, Targs... rest){
    add(value);
}

template<typename T>
add(T value);

template<>
add<datakind::RESULT>(datakind::RESULT value);


Add in timer so we can handle overflow.
    Necessary? Are any compute regions greater than ~60 secs?
    Would need to set up and tear down per region. Maybe just print out a
    warning if the end time is greater than some threshold, indicating that it
    should be re-run with overflow handling turned on.
        Add a compilation flag that turns on overflow handling.
